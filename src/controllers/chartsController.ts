import { Response } from "express";
import db from "../firebs";
import { AuthenticatedRequest } from "../utils/interfaces";

export const getInvoicesSumByUserIdHandler = async (
  req: AuthenticatedRequest,
  res: Response
): Promise<void> => {
  try {
    const requester = req.user;
    if (!requester) {
      res.status(401).json({ error: "Unauthorized" });
      return;
    }
    const { userId } = req.body;
    if (!userId) {
      res.status(400).json({ error: "Missing userId" });
      return;
    }
    const snapshot = await db.collection("invoices")
      .where("userId", "==", userId)
      .get();

    if (snapshot.empty) {
      res.status(405).json({ error: "No invoices generated by this user" });
      return;
    }

    const totals = snapshot.docs.reduce((acc, doc) => {
      const data = doc.data();
      const totalPrice = Number(data.totalPrice) || 0;
      const totalProfits = Number(data.totalProfits) || 0;
      return {
        totalPrice: acc.totalPrice + totalPrice,
        totalProfits: acc.totalProfits + totalProfits
      };
    }, { totalPrice: 0, totalProfits: 0 });
    
    res.status(200).json(totals);
  } catch (error: any) {
    console.error("Error calculating invoice sum:", error);
    res.status(500).json({ error: error.message });
  }
}

export const getInvoicesSumByBranchIdHandler = async (
  req: AuthenticatedRequest,
  res: Response
): Promise<void> => {
  try {
    const requester = req.user;
    if (!requester) {
      res.status(401).json({ error: "Unauthorized" });
      return;
    }
    const { branchId } = req.body;
    const snapshot = await db.collection("invoices")
      .where("branchId", "==", branchId)
      .get();

    if (snapshot.empty) {
      res.status(405).json({ error: "No invoices found for this branch" });
      return;
    }

    const totals = snapshot.docs.reduce((acc, doc) => {
      const data = doc.data();
      const totalPrice = Number(data.totalPrice) || 0;
      const totalProfits = Number(data.totalProfits) || 0;
      return {
        totalPrice: acc.totalPrice + totalPrice,
        totalProfits: acc.totalProfits + totalProfits
      };
    }, { totalPrice: 0, totalProfits: 0 });
    
    res.status(200).json(totals);
  } catch (error: any) {
    console.error("Error calculating invoice sum by branch:", error);
    res.status(500).json({ error: error.message });
  }
}

export const getInvoicesSumsByBranchUsersHandler = async (
  req: AuthenticatedRequest,
  res: Response
): Promise<void> => {
  try {
    const requester = req.user;
    if (!requester) {
      res.status(401).json({ error: "Unauthorized" });
      return;
    }
    const { branchId } = req.body;
    
    const snapshot = await db.collection("invoices")
      .where("branchId", "==", branchId)
      .get();

    if (snapshot.empty) {
      res.status(405).json({ error: "No invoices found for this branch" });
      return;
    }

    // Aggregate sums for each user in the branch
    const userTotals: Record<string, { totalPrice: number; totalProfits: number }> = {};
    snapshot.docs.forEach(doc => {
      const data = doc.data();
      const userID = data.userID;
      const totalPrice = Number(data.totalPrice) || 0;
      const totalProfits = Number(data.totalProfits) || 0;

      if (userID) {
        if (userTotals[userID]) {
          userTotals[userID].totalPrice += totalPrice;
          userTotals[userID].totalProfits += totalProfits;
        } else {
          userTotals[userID] = { totalPrice, totalProfits };
        }
      }
    });

    // Convert the aggregated results to an array of objects
    const result = Object.keys(userTotals).map(userID => ({
      userID,
      totalPrice: userTotals[userID].totalPrice,
      totalProfits: userTotals[userID].totalProfits
    }));

    res.status(200).json(result);
  } catch (error: any) {
    console.error("Error calculating invoice sums by branch users:", error);
    res.status(500).json({ error: error.message });
  }
}
